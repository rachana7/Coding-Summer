#include<algorithm>
#include<iostream>
#include<vector>

using namespace std;

struct node
	{
	int data;
	struct node *next;
	};
struct node *start=NULL;

void create()
{
	struct node *temp,*ptr;
	temp=(struct node *)malloc(sizeof(struct node));
	if(temp==NULL)
	{
		cout<<"out of memory space "<<endl;
		exit(0);
	}
	cout<<"enter the value of the node you want to create"<<endl;
	cin>>temp->data;
	temp->next=NULL;
	if(start==NULL)
	{
		start=temp;
	}
	else
	{
		ptr=start;
		while(ptr->next!=NULL)
		{
			ptr=ptr->next;
		}
		ptr->next=temp;
	}
}
void display()
{
	struct node *ptr;
	if(start==NULL)
	{
		cout<<"list empty"<<endl;	
		return;
	}
	else
	{
		ptr=start;
		cout<<"elements present in the list: "<<endl;
		while(ptr!=NULL)
		{
			cout<<ptr->data<<"  ";
			ptr=ptr->next;
		}
	}

}

void Insert_begin()
{
	int value;
	struct node *temp;
	temp=(struct node *)malloc(sizeof(struct node));
	cout<<"enter the value to be inserted "<<endl;
	cin>>value;
	temp->data=value;
	if(start==NULL)
	{
		temp=start;
		temp->next=NULL;
	}
	else
	{
		temp->next=start;
		start=temp;
	}
}
void Insert_end()
{
	int value;
	struct node *temp,*ptr;
	temp=(struct node *)malloc(sizeof(struct node));
	cout<<"enter the value to be inserted "<<endl;
	cin>>value;
	temp->data=value;
	if(start==NULL)
	{
		cout<<"check 1"<<endl;
		temp=start;
		temp->next=NULL;
	}
	else
	{
		ptr=start;
		//cout<<"check 2"<<endl;
		while(ptr->next!=NULL)
		{
			ptr=ptr->next;
		}	
		ptr->next=temp;
		temp->next=NULL;
	}

}

void Insert_middle()
{
	int value;
	struct node *temp,*ptr;
	int count=1;
	int posn;

	cout<<"enter the posn to be inserted"<<endl;
	cin>>posn;
	temp=(struct node *)malloc(sizeof(struct node));
	cout<<"enter the value to be inserted "<<endl;
	cin>>value;
	temp->data=value;
	ptr=start;
	if (posn==1)
	{
		if(start==NULL)
		{	
			temp=start;
			temp->next=NULL;
		}
		else
		{
		temp->next=start;
		start=temp;
		}		
	}
	else
	{

	while(count!=posn-1)
	{
		ptr=ptr->next;
		count++;
		if(ptr->next==NULL)
		{
			cout<<"index out of range"<<endl;	
			
		}
				
	}
	temp->next=ptr->next;
	ptr->next=temp;
	
	}
	
}
void sort()
{
	struct node *ptr,*s;
	ptr=start;
	int value;
	while(ptr !=NULL)
	{
		for(s=ptr->next;s!=NULL;s=s->next)
		{
			if(ptr->data >s->data)
			{
				value=ptr->data;
				ptr->data=s->data;
				s->data=value;
			}	
		}
	ptr=ptr->next;
	}
}

void delete_posn()
{
	struct node *ptr;
	int posn;
	int count=1;
	cout<<"enter the posn you want to delete "<<endl;
	cin>>posn;
	ptr=start;

	if(posn==1)
	{
		start=start->next;
	}
	else
	{
	cout<<"check 1"<<endl;
	while(count!=posn-1)
	{
		cout<<"check "<<count<<endl;
		ptr=ptr->next;
		count++;
		if(ptr->next==NULL)
		{
			cout<<"index out of range"<<endl;	
			
		}
	}
	ptr->next=(ptr->next)->next;
	}
}
		
int main()
{
	int choice;
	
	while(1)
	{
		cout<<"MENU : "<<endl;
		cout<<"1.create node "<<endl;
		cout<<"2.display list"<<endl;
		cout<<"3.Insert at the start"<<endl;
		cout<<"4.Insert at the middle"<<endl;
		cout<<"5.Insert at end"<<endl;
		cout<<"6.sort linked list"<<endl;
		cout<<"7.delete node from position"<<endl;
		cin>>choice;
		switch(choice)
		{
			case 1:
				create();
				break;
			case 2:
				display();
				break;
			case 3:
				Insert_begin();
				break;
			case 4:
				Insert_middle();
				break;
			case 5:
				Insert_end();
				break;
			case 6:
				sort();
				break;
			case 7:
				delete_posn();
				break;
			
		}

	}
	
	
	//cout<<"count is :"<<count<<endl;
	return 0;
}
